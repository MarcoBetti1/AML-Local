{"ast":null,"code":"var _jsxFileName = \"/Users/m0b0yxy/Desktop/V1.2/uxui/src/VisualizationPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport ReactFlow, { Controls, Background, MarkerType } from 'react-flow-renderer';\nimport nodeTypes from './nodeTypes';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VisualizationPanel({\n  nodes,\n  edges,\n  onNodesChange,\n  onEdgesChange,\n  onNodeDoubleClick\n}) {\n  _s();\n  const edgesWithLabels = useMemo(() => {\n    return edges.map(edge => {\n      if (edge.type === 'direct') {\n        return {\n          ...edge,\n          type: 'straight',\n          animated: false,\n          style: {\n            stroke: '#888',\n            strokeWidth: 1,\n            strokeDasharray: '5, 5'\n          }\n        };\n      }\n      const sourceNode = nodes.find(node => node.id === edge.source);\n      const targetNode = nodes.find(node => node.id === edge.target);\n      let label = '';\n      if ((sourceNode.type === 'Customer' || targetNode.type === 'Customer') && (sourceNode.type === 'Transfer' || targetNode.type === 'BillPay' || targetNode.type === 'Transfer' || targetNode.type === 'BillPay')) {\n        label = `${sourceNode.type} → ${targetNode.data.transaction}`;\n      }\n      return {\n        ...edge,\n        type: 'straight',\n        animated: false,\n        label,\n        labelStyle: {\n          fill: '#888',\n          fontWeight: 700\n        },\n        labelBgPadding: [8, 4],\n        labelBgBorderRadius: 4,\n        labelBgStyle: {\n          fill: '#ffffff',\n          color: '#888',\n          fillOpacity: 0.7\n        },\n        style: {\n          stroke: '#888',\n          strokeWidth: 2\n        },\n        markerEnd: {\n          color: '#888'\n        }\n      };\n    });\n  }, [edges, nodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visualization-panel\",\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: nodes.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edgesWithLabels,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        nodeTypes: nodeTypes,\n        onNodeDoubleClick: onNodeDoubleClick,\n        fitView: true,\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          color: \"#f0f0f0\",\n          gap: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(VisualizationPanel, \"r775DA2f0wuXw+kINPi3Fqzep/8=\");\n_c = VisualizationPanel;\nexport default VisualizationPanel;\nvar _c;\n$RefreshReg$(_c, \"VisualizationPanel\");","map":{"version":3,"names":["React","useMemo","ReactFlow","Controls","Background","MarkerType","nodeTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","VisualizationPanel","nodes","edges","onNodesChange","onEdgesChange","onNodeDoubleClick","_s","edgesWithLabels","map","edge","type","animated","style","stroke","strokeWidth","strokeDasharray","sourceNode","find","node","id","source","targetNode","target","label","data","transaction","labelStyle","fill","fontWeight","labelBgPadding","labelBgBorderRadius","labelBgStyle","color","fillOpacity","markerEnd","className","width","height","children","length","fitView","fileName","_jsxFileName","lineNumber","columnNumber","gap","_c","$RefreshReg$"],"sources":["/Users/m0b0yxy/Desktop/V1.2/uxui/src/VisualizationPanel.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport ReactFlow, {\n  Controls,\n  Background,\n  MarkerType,\n} from 'react-flow-renderer';\nimport nodeTypes from './nodeTypes';\n\nfunction VisualizationPanel({ nodes, edges, onNodesChange, onEdgesChange, onNodeDoubleClick }) {\n  const edgesWithLabels = useMemo(() => {\n    return edges.map(edge => {\n      if (edge.type === 'direct') {\n        return {\n          ...edge,\n          type: 'straight',\n          animated: false,\n          style: { stroke: '#888', strokeWidth: 1, strokeDasharray: '5, 5' },\n        };\n      }\n\n      const sourceNode = nodes.find(node => node.id === edge.source);\n      const targetNode = nodes.find(node => node.id === edge.target);\n      let label = '';\n      \n      if ((sourceNode.type === 'Customer' || targetNode.type === 'Customer') &&\n          (sourceNode.type === 'Transfer' || targetNode.type === 'BillPay' || \n           targetNode.type === 'Transfer' || targetNode.type === 'BillPay')) {\n\n        label = `${sourceNode.type} → ${targetNode.data.transaction}`;\n      }\n\n      return {\n        ...edge,\n        type: 'straight',\n        animated: false,\n        label,\n        labelStyle: { fill: '#888', fontWeight: 700 },\n        labelBgPadding: [8, 4],\n        labelBgBorderRadius: 4,\n        labelBgStyle: { fill: '#ffffff', color: '#888', fillOpacity: 0.7 },\n        style: { stroke: '#888', strokeWidth: 2 },\n        markerEnd: {\n          color: '#888',\n        },\n      };\n    });\n  }, [edges, nodes]);\n\n  return (\n    <div className=\"visualization-panel\" style={{ width: '100%', height: '100%' }}>\n      {nodes.length > 0 ? (\n        <>\n          <ReactFlow\n            nodes={nodes}\n            edges={edgesWithLabels}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            nodeTypes={nodeTypes}\n            onNodeDoubleClick={onNodeDoubleClick}\n            fitView\n            style={{ width: '100%', height: '100%' }}\n          >\n            <Controls />\n            <Background color=\"#f0f0f0\" gap={16} />\n          </ReactFlow>\n          <div className=\"graph-controls\">\n          </div>\n        </>\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n}\n\nexport default VisualizationPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}