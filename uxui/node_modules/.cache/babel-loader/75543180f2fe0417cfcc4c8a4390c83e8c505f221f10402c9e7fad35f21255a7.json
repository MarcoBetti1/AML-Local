{"ast":null,"code":"var _jsxFileName = \"/Users/m0b0yxy/Desktop/V1.2/uxui/src/GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, applyNodeChanges, applyEdgeChanges } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getInitialNodePosition = type => {\n  const centerX = 250;\n  const centerY = 250;\n  const radius = 200;\n  const angle = Math.random() * 2 * Math.PI;\n  switch (type) {\n    case 'Customer':\n      return {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    case 'Counter-Party':\n      return {\n        x: centerX + radius * 0.9 * Math.cos(angle + Math.PI),\n        y: centerY + radius * 0.6 * Math.sin(angle + Math.PI)\n      };\n    case 'Business':\n      return {\n        x: centerX + radius * 0.6 * Math.cos(angle + Math.PI / 2),\n        y: centerY + radius * 0.9 * Math.sin(angle + Math.PI / 2)\n      };\n    case 'Transfer':\n    case 'BillPay':\n      return {\n        x: centerX + radius * 0.4 * Math.cos(angle),\n        y: centerY + radius * 0.3 * Math.sin(angle)\n      };\n    default:\n      return {\n        x: centerX + radius * Math.random(),\n        y: centerY + radius * Math.random()\n      };\n  }\n};\nconst GraphVisualization = ({\n  graphData,\n  onNodeDoubleClick\n}) => {\n  _s();\n  const [nodes, setNodes] = useNodesState(graphData.nodes.map(node => ({\n    ...node,\n    position: getInitialNodePosition(node.type)\n  })));\n  const [edges, setEdges] = useEdgesState(graphData.edges.map(edge => ({\n    ...edge,\n    type: 'smoothstep',\n    animated: true,\n    style: {\n      stroke: '#888'\n    }\n  })));\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), [setNodes]);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), [setEdges]);\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onNodeDoubleClick: onNodeDoubleClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"tqTvyihuFKFbb3vyCtbaRv+yfUw=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useCallback","ReactFlow","useNodesState","useEdgesState","applyNodeChanges","applyEdgeChanges","jsxDEV","_jsxDEV","getInitialNodePosition","type","centerX","centerY","radius","angle","Math","random","PI","x","cos","y","sin","GraphVisualization","graphData","onNodeDoubleClick","_s","nodes","setNodes","map","node","position","edges","setEdges","edge","animated","style","stroke","onNodesChange","changes","nds","onEdgesChange","eds","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/m0b0yxy/Desktop/V1.2/uxui/src/GraphVisualization.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport ReactFlow, { \n  useNodesState, \n  useEdgesState, \n  applyNodeChanges, \n  applyEdgeChanges \n} from 'react-flow-renderer';\n\nconst getInitialNodePosition = (type) => {\n  const centerX = 250;\n  const centerY = 250;\n  const radius = 200;\n  const angle = Math.random() * 2 * Math.PI;\n  \n  switch(type) {\n    case 'Customer':\n      return { x: centerX + radius * Math.cos(angle), y: centerY + radius * Math.sin(angle) };\n    case 'Counter-Party':\n      return { x: centerX + radius * 0.9 * Math.cos(angle + Math.PI), y: centerY + radius * 0.6 * Math.sin(angle + Math.PI) };\n    case 'Business':\n      return { x: centerX + radius * 0.6 * Math.cos(angle + Math.PI/2), y: centerY + radius * 0.9 * Math.sin(angle + Math.PI/2) };\n    case 'Transfer':\n    case 'BillPay':\n      return { x: centerX + radius * 0.4 * Math.cos(angle), y: centerY + radius * 0.3 * Math.sin(angle) };\n    default:\n      return { x: centerX + radius * Math.random(), y: centerY + radius * Math.random() };\n  }\n};\n\nconst GraphVisualization = ({ graphData, onNodeDoubleClick }) => {\n  const [nodes, setNodes] = useNodesState(graphData.nodes.map(node => ({\n    ...node,\n    position: getInitialNodePosition(node.type),\n  })));\n  const [edges, setEdges] = useEdgesState(graphData.edges.map(edge => ({\n    ...edge,\n    type: 'smoothstep',\n    animated: true,\n    style: { stroke: '#888' },\n  })));\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    [setNodes]\n  );\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges]\n  );\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onNodeDoubleClick={onNodeDoubleClick}\n    />\n  );\n};\n\nexport default GraphVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}