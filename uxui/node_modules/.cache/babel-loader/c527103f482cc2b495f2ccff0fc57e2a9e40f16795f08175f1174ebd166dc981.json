{"ast":null,"code":"var _jsxFileName = \"/Users/m0b0yxy/Desktop/V1.2/uxui/src/VisualizationPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport ReactFlow, { Controls, Background, MarkerType } from 'react-flow-renderer';\nimport nodeTypes from './nodeTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VisualizationPanel({\n  nodes,\n  edges,\n  onNodesChange,\n  onEdgesChange,\n  onNodeDoubleClick\n}) {\n  _s();\n  const edgesWithLabels = useMemo(() => {\n    return edges.map(edge => {\n      const sourceNode = nodes.find(node => node.id === edge.source);\n      const targetNode = nodes.find(node => node.id === edge.target);\n      let label = '';\n      if (sourceNode.type === 'Customer' || targetNode.type === 'Customer') {\n        label = `Customer ${targetNode.type === 'Transfer' || targetNode.type === 'BillPay' ? '→ ' + targetNode.type : ''}`;\n      } else if (sourceNode.type === 'Counter-Party' || targetNode.type === 'Counter-Party') {\n        label = `Counter-Party ${targetNode.type === 'Transfer' ? '→ Transfer' : ''}`;\n      }\n      return {\n        ...edge,\n        type: 'straight',\n        animated: false,\n        label,\n        style: {\n          stroke: '#888'\n        },\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          color: '#888'\n        }\n      };\n    });\n  }, [edges, nodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visualization-panel\",\n    children: nodes.length > 0 ? /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edgesWithLabels,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes,\n      onNodeDoubleClick: onNodeDoubleClick,\n      fitView: true,\n      style: {\n        width: '100%',\n        height: 'calc(100vh - 60px)'\n      },\n      defaultViewport: {\n        x: 0,\n        y: 0,\n        zoom: 1.5\n      },\n      nodesDraggable: true,\n      elementsSelectable: false,\n      minZoom: 0.5,\n      maxZoom: 2,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#f0f0f0\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a group to view its visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(VisualizationPanel, \"r775DA2f0wuXw+kINPi3Fqzep/8=\");\n_c = VisualizationPanel;\nexport default VisualizationPanel;\nvar _c;\n$RefreshReg$(_c, \"VisualizationPanel\");","map":{"version":3,"names":["React","useMemo","ReactFlow","Controls","Background","MarkerType","nodeTypes","jsxDEV","_jsxDEV","VisualizationPanel","nodes","edges","onNodesChange","onEdgesChange","onNodeDoubleClick","_s","edgesWithLabels","map","edge","sourceNode","find","node","id","source","targetNode","target","label","type","animated","style","stroke","markerEnd","ArrowClosed","color","className","children","length","fitView","width","height","defaultViewport","x","y","zoom","nodesDraggable","elementsSelectable","minZoom","maxZoom","fileName","_jsxFileName","lineNumber","columnNumber","gap","_c","$RefreshReg$"],"sources":["/Users/m0b0yxy/Desktop/V1.2/uxui/src/VisualizationPanel.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport ReactFlow, { \n  Controls, \n  Background,\n  MarkerType,\n} from 'react-flow-renderer';\nimport nodeTypes from './nodeTypes';\n\nfunction VisualizationPanel({ nodes, edges, onNodesChange, onEdgesChange, onNodeDoubleClick }) {\n  const edgesWithLabels = useMemo(() => {\n    return edges.map(edge => {\n      const sourceNode = nodes.find(node => node.id === edge.source);\n      const targetNode = nodes.find(node => node.id === edge.target);\n      let label = '';\n      \n      if (sourceNode.type === 'Customer' || targetNode.type === 'Customer') {\n        label = `Customer ${targetNode.type === 'Transfer' || targetNode.type === 'BillPay' ? '→ ' + targetNode.type : ''}`;\n      } else if (sourceNode.type === 'Counter-Party' || targetNode.type === 'Counter-Party') {\n        label = `Counter-Party ${targetNode.type === 'Transfer' ? '→ Transfer' : ''}`;\n      }\n\n      return {\n        ...edge,\n        type: 'straight',\n        animated: false,\n        label,\n        style: { stroke: '#888' },\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          color: '#888',\n        },\n      };\n    });\n  }, [edges, nodes]);\n\n  return (\n    <div className=\"visualization-panel\">\n      {nodes.length > 0 ? (\n        <ReactFlow \n          nodes={nodes}\n          edges={edgesWithLabels}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          nodeTypes={nodeTypes}\n          onNodeDoubleClick={onNodeDoubleClick}\n          fitView\n          style={{ width: '100%', height: 'calc(100vh - 60px)' }}\n          defaultViewport={{ x: 0, y: 0, zoom: 1.5 }}\n          nodesDraggable={true}\n          elementsSelectable={false}\n          minZoom={0.5}\n          maxZoom={2}\n        >\n          <Controls />\n          <Background color=\"#f0f0f0\" gap={16} />\n        </ReactFlow>\n      ) : (\n        <p>Select a group to view its visualization</p>\n      )}\n    </div>\n  );\n}\n\nexport default VisualizationPanel;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,SAAS,IACdC,QAAQ,EACRC,UAAU,EACVC,UAAU,QACL,qBAAqB;AAC5B,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,kBAAkBA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,aAAa;EAAEC,aAAa;EAAEC;AAAkB,CAAC,EAAE;EAAAC,EAAA;EAC7F,MAAMC,eAAe,GAAGf,OAAO,CAAC,MAAM;IACpC,OAAOU,KAAK,CAACM,GAAG,CAACC,IAAI,IAAI;MACvB,MAAMC,UAAU,GAAGT,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,IAAI,CAACK,MAAM,CAAC;MAC9D,MAAMC,UAAU,GAAGd,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,IAAI,CAACO,MAAM,CAAC;MAC9D,IAAIC,KAAK,GAAG,EAAE;MAEd,IAAIP,UAAU,CAACQ,IAAI,KAAK,UAAU,IAAIH,UAAU,CAACG,IAAI,KAAK,UAAU,EAAE;QACpED,KAAK,GAAG,YAAYF,UAAU,CAACG,IAAI,KAAK,UAAU,IAAIH,UAAU,CAACG,IAAI,KAAK,SAAS,GAAG,IAAI,GAAGH,UAAU,CAACG,IAAI,GAAG,EAAE,EAAE;MACrH,CAAC,MAAM,IAAIR,UAAU,CAACQ,IAAI,KAAK,eAAe,IAAIH,UAAU,CAACG,IAAI,KAAK,eAAe,EAAE;QACrFD,KAAK,GAAG,iBAAiBF,UAAU,CAACG,IAAI,KAAK,UAAU,GAAG,YAAY,GAAG,EAAE,EAAE;MAC/E;MAEA,OAAO;QACL,GAAGT,IAAI;QACPS,IAAI,EAAE,UAAU;QAChBC,QAAQ,EAAE,KAAK;QACfF,KAAK;QACLG,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAO,CAAC;QACzBC,SAAS,EAAE;UACTJ,IAAI,EAAEtB,UAAU,CAAC2B,WAAW;UAC5BC,KAAK,EAAE;QACT;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACtB,KAAK,EAAED,KAAK,CAAC,CAAC;EAElB,oBACEF,OAAA;IAAK0B,SAAS,EAAC,qBAAqB;IAAAC,QAAA,EACjCzB,KAAK,CAAC0B,MAAM,GAAG,CAAC,gBACf5B,OAAA,CAACN,SAAS;MACRQ,KAAK,EAAEA,KAAM;MACbC,KAAK,EAAEK,eAAgB;MACvBJ,aAAa,EAAEA,aAAc;MAC7BC,aAAa,EAAEA,aAAc;MAC7BP,SAAS,EAAEA,SAAU;MACrBQ,iBAAiB,EAAEA,iBAAkB;MACrCuB,OAAO;MACPR,KAAK,EAAE;QAAES,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAqB,CAAE;MACvDC,eAAe,EAAE;QAAEC,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAI,CAAE;MAC3CC,cAAc,EAAE,IAAK;MACrBC,kBAAkB,EAAE,KAAM;MAC1BC,OAAO,EAAE,GAAI;MACbC,OAAO,EAAE,CAAE;MAAAZ,QAAA,gBAEX3B,OAAA,CAACL,QAAQ;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZ3C,OAAA,CAACJ,UAAU;QAAC6B,KAAK,EAAC,SAAS;QAACmB,GAAG,EAAE;MAAG;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,gBAEZ3C,OAAA;MAAA2B,QAAA,EAAG;IAAwC;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC/C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpC,EAAA,CArDQN,kBAAkB;AAAA4C,EAAA,GAAlB5C,kBAAkB;AAuD3B,eAAeA,kBAAkB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}