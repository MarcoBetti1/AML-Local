{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nconst API_BASE_URL = 'http://localhost:3001/api';\nexport const useGroups = () => {\n  _s();\n  const [allGroups, setAllGroups] = useState([]);\n  const [displayGroups, setDisplayGroups] = useState([]);\n  const fetchGroupInfo = useCallback(async groupId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/group-info/${groupId}`);\n      if (!response.ok) throw new Error('Failed to fetch group info');\n      const data = await response.json();\n      return data.displayValue;\n    } catch (error) {\n      console.error('Error fetching group info:', error);\n      return groupId; // Fallback to using the group ID if fetch fails\n    }\n  }, []);\n  const fetchAllGroups = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/groups`);\n      const data = await response.json();\n      setAllGroups(data);\n\n      // Fetch display names for all groups\n      const groupsWithDisplayNames = await Promise.all(data.map(async groupId => {\n        const displayValue = await fetchGroupInfo(groupId);\n        console.log(\"TEST\", displayValue);\n        return {\n          group: groupId,\n          displayValue\n        };\n      }));\n      setDisplayGroups(groupsWithDisplayNames);\n    } catch (error) {\n      console.error('Failed to fetch all groups:', error);\n    }\n  }, [fetchGroupInfo]);\n  useEffect(() => {\n    fetchAllGroups();\n  }, [fetchAllGroups]);\n  const handleSearch = useCallback(async searchTerm => {\n    if (!searchTerm) {\n      setDisplayGroups(allGroups.map(group => ({\n        group,\n        displayValue: group\n      })));\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/search?term=${encodeURIComponent(searchTerm)}`);\n      if (!response.ok) throw new Error('Search failed');\n      const data = await response.json();\n      setDisplayGroups(data);\n    } catch (error) {\n      console.error('Error performing search:', error);\n    }\n  }, [allGroups]);\n  return {\n    allGroups,\n    displayGroups,\n    handleSearch\n  };\n};\n_s(useGroups, \"HwV82xsAo4F0ZuiNiO+SW5/Bk1s=\");\nexport const useGroupData = () => {\n  _s2();\n  const [groupData, setGroupData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchGroupData = useCallback(async (groupId, startDate = '', endDate = '') => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/groups/${groupId}/data?${new URLSearchParams({\n        startDate,\n        endDate\n      })}`);\n      const data = await response.json();\n      setGroupData(data);\n    } catch (error) {\n      console.error('Failed to fetch group data:', error);\n      setError('Failed to fetch group data. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  return {\n    groupData,\n    isLoading,\n    error,\n    fetchGroupData\n  };\n};\n_s2(useGroupData, \"wvtIP771vLRtxgS/tX65mQZuQ1g=\");\nexport const useTimeframe = onApply => {\n  _s3();\n  const [timeframe, setTimeframe] = useState({\n    startDate: '',\n    endDate: ''\n  });\n  const handleStartDateChange = date => setTimeframe(prev => ({\n    ...prev,\n    startDate: date\n  }));\n  const handleEndDateChange = date => setTimeframe(prev => ({\n    ...prev,\n    endDate: date\n  }));\n  const handleApply = () => {\n    onApply(timeframe.startDate, timeframe.endDate);\n  };\n  const handleReset = () => {\n    setTimeframe({\n      startDate: '',\n      endDate: ''\n    });\n    onApply('', '');\n  };\n  return {\n    timeframe,\n    handleStartDateChange,\n    handleEndDateChange,\n    handleApply,\n    handleReset\n  };\n};\n_s3(useTimeframe, \"+x/qfkpJ9hgSJmffq6YGmt59bts=\");","map":{"version":3,"names":["useState","useCallback","useEffect","API_BASE_URL","useGroups","_s","allGroups","setAllGroups","displayGroups","setDisplayGroups","fetchGroupInfo","groupId","response","fetch","ok","Error","data","json","displayValue","error","console","fetchAllGroups","groupsWithDisplayNames","Promise","all","map","log","group","handleSearch","searchTerm","encodeURIComponent","useGroupData","_s2","groupData","setGroupData","isLoading","setIsLoading","setError","fetchGroupData","startDate","endDate","URLSearchParams","useTimeframe","onApply","_s3","timeframe","setTimeframe","handleStartDateChange","date","prev","handleEndDateChange","handleApply","handleReset"],"sources":["/Users/m0b0yxy/Desktop/V1.2/uxui/src/hooks.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nconst API_BASE_URL = 'http://localhost:3001/api';\n\nexport const useGroups = () => {\n  const [allGroups, setAllGroups] = useState([]);\n  const [displayGroups, setDisplayGroups] = useState([]);\n\n  const fetchGroupInfo = useCallback(async (groupId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/group-info/${groupId}`);\n      if (!response.ok) throw new Error('Failed to fetch group info');\n      const data = await response.json();\n      return data.displayValue;\n    } catch (error) {\n      console.error('Error fetching group info:', error);\n      return groupId; // Fallback to using the group ID if fetch fails\n    }\n  }, []);\n\n  const fetchAllGroups = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/groups`);\n      const data = await response.json();\n      setAllGroups(data);\n\n      // Fetch display names for all groups\n      const groupsWithDisplayNames = await Promise.all(\n        data.map(async (groupId) => {\n          const displayValue = await fetchGroupInfo(groupId);\n          console.log(\"TEST\",displayValue)\n          return { group: groupId, displayValue };\n        })\n\n      );\n      setDisplayGroups(groupsWithDisplayNames);\n    } catch (error) {\n      console.error('Failed to fetch all groups:', error);\n    }\n  }, [fetchGroupInfo]);\n\n  useEffect(() => {\n    fetchAllGroups();\n  }, [fetchAllGroups]);\n\n\n  const handleSearch = useCallback(async (searchTerm) => {\n    if (!searchTerm) {\n      setDisplayGroups(allGroups.map(group => ({ group, displayValue: group })));\n      return;\n    }\n  \n    try {\n      const response = await fetch(`${API_BASE_URL}/search?term=${encodeURIComponent(searchTerm)}`);\n      if (!response.ok) throw new Error('Search failed');\n      const data = await response.json();\n      setDisplayGroups(data);\n    } catch (error) {\n      console.error('Error performing search:', error);\n    }\n  }, [allGroups]);\n\n  return { allGroups, displayGroups, handleSearch };\n};\n\nexport const useGroupData = () => {\n  const [groupData, setGroupData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchGroupData = useCallback(async (groupId, startDate = '', endDate = '') => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/groups/${groupId}/data?${new URLSearchParams({\n        startDate,\n        endDate\n      })}`);\n      const data = await response.json();\n      setGroupData(data);\n    } catch (error) {\n      console.error('Failed to fetch group data:', error);\n      setError('Failed to fetch group data. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return { groupData, isLoading, error, fetchGroupData };\n};\n\nexport const useTimeframe = (onApply) => {\n  const [timeframe, setTimeframe] = useState({ startDate: '', endDate: '' });\n\n  const handleStartDateChange = (date) => setTimeframe(prev => ({ ...prev, startDate: date }));\n  const handleEndDateChange = (date) => setTimeframe(prev => ({ ...prev, endDate: date }));\n\n  const handleApply = () => {\n    onApply(timeframe.startDate, timeframe.endDate);\n  };\n\n  const handleReset = () => {\n    setTimeframe({ startDate: '', endDate: '' });\n    onApply('', '');\n  };\n\n  return { timeframe, handleStartDateChange, handleEndDateChange, handleApply, handleReset };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}