{"ast":null,"code":"var _jsxFileName = \"/Users/m0b0yxy/Desktop/V1.2/uxui/src/GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useMemo } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, applyNodeChanges, applyEdgeChanges, MarkerType } from 'react-flow-renderer';\nimport nodeTypes from './nodeTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getInitialNodePosition = type => {\n  const centerX = 250;\n  const centerY = 250;\n  const radius = 200;\n  const angle = Math.random() * 2 * Math.PI;\n  switch (type) {\n    case 'Customer':\n      return {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    case 'Counter-Party':\n      return {\n        x: centerX + radius * 0.9 * Math.cos(angle + Math.PI),\n        y: centerY + radius * 0.6 * Math.sin(angle + Math.PI)\n      };\n    case 'Business':\n      return {\n        x: centerX + radius * 0.6 * Math.cos(angle + Math.PI / 2),\n        y: centerY + radius * 0.9 * Math.sin(angle + Math.PI / 2)\n      };\n    case 'Transfer':\n    case 'BillPay':\n      return {\n        x: centerX + radius * 0.4 * Math.cos(angle),\n        y: centerY + radius * 0.3 * Math.sin(angle)\n      };\n    default:\n      return {\n        x: centerX + radius * Math.random(),\n        y: centerY + radius * Math.random()\n      };\n  }\n};\nconst GraphVisualization = ({\n  graphData,\n  onNodeDoubleClick,\n  onLinkClick\n}) => {\n  _s();\n  const initialNodes = useMemo(() => graphData.nodes.map(node => ({\n    ...node,\n    position: getInitialNodePosition(node.type),\n    data: {\n      ...node.data,\n      displayName: node.data.label,\n      onLinkClick: node.data.link ? () => onLinkClick(node.data.link) : undefined\n    }\n  })), [graphData.nodes, onLinkClick]);\n  const initialEdges = useMemo(() => graphData.edges.map(edge => {\n    const sourceNode = graphData.nodes.find(node => node.id === edge.source);\n    const targetNode = graphData.nodes.find(node => node.id === edge.target);\n    let label = '';\n    if ((sourceNode.type === 'Customer' || targetNode.type === 'Customer') && (sourceNode.type === 'Transfer' || sourceNode.type === 'BillPay' || targetNode.type === 'Transfer' || targetNode.type === 'BillPay')) {\n      const transactionNode = sourceNode.type === 'Transfer' || sourceNode.type === 'BillPay' ? sourceNode : targetNode;\n      const customerNode = sourceNode.type === 'Customer' ? sourceNode : targetNode;\n      if (transactionNode.data && transactionNode.data.info) {\n        const transactionType = transactionNode.data.info.type;\n        if (transactionType === 'send' || transactionType === 'receive') {\n          label = `Customer ${transactionType === 'send' ? 'sends' : 'receives'}`;\n        } else if (transactionType === 'billPay') {\n          label = `Customer billPay`;\n        }\n      }\n    }\n    return {\n      ...edge,\n      type: 'straight',\n      animated: false,\n      label,\n      labelStyle: {\n        fill: '#888',\n        fontWeight: 700\n      },\n      labelBgPadding: [8, 4],\n      labelBgBorderRadius: 4,\n      labelBgStyle: {\n        fill: '#ffffff',\n        color: '#888',\n        fillOpacity: 0.7\n      },\n      style: {\n        stroke: '#888',\n        strokeWidth: 2\n      }\n    };\n  }), [graphData.edges, graphData.nodes]);\n  const [nodes, setNodes] = useNodesState(initialNodes);\n  const [edges, setEdges] = useEdgesState(initialEdges);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), [setNodes]);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), [setEdges]);\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onNodeDoubleClick: onNodeDoubleClick,\n    nodeTypes: nodeTypes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this);\n};\n_s(GraphVisualization, \"fldQ3R4KFR0o2rUP1BYiL/3Ew24=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useCallback","useMemo","ReactFlow","useNodesState","useEdgesState","applyNodeChanges","applyEdgeChanges","MarkerType","nodeTypes","jsxDEV","_jsxDEV","getInitialNodePosition","type","centerX","centerY","radius","angle","Math","random","PI","x","cos","y","sin","GraphVisualization","graphData","onNodeDoubleClick","onLinkClick","_s","initialNodes","nodes","map","node","position","data","displayName","label","link","undefined","initialEdges","edges","edge","sourceNode","find","id","source","targetNode","target","transactionNode","customerNode","info","transactionType","animated","labelStyle","fill","fontWeight","labelBgPadding","labelBgBorderRadius","labelBgStyle","color","fillOpacity","style","stroke","strokeWidth","setNodes","setEdges","onNodesChange","changes","nds","onEdgesChange","eds","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/m0b0yxy/Desktop/V1.2/uxui/src/GraphVisualization.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport ReactFlow, {\n  useNodesState,\n  useEdgesState,\n  applyNodeChanges,\n  applyEdgeChanges,\n  MarkerType,\n} from 'react-flow-renderer';\nimport nodeTypes from './nodeTypes';\n\nconst getInitialNodePosition = (type) => {\n  const centerX = 250;\n  const centerY = 250;\n  const radius = 200;\n  const angle = Math.random() * 2 * Math.PI;\n  \n  switch(type) {\n    case 'Customer':\n      return { x: centerX + radius * Math.cos(angle), y: centerY + radius * Math.sin(angle) };\n    case 'Counter-Party':\n      return { x: centerX + radius * 0.9 * Math.cos(angle + Math.PI), y: centerY + radius * 0.6 * Math.sin(angle + Math.PI) };\n    case 'Business':\n      return { x: centerX + radius * 0.6 * Math.cos(angle + Math.PI/2), y: centerY + radius * 0.9 * Math.sin(angle + Math.PI/2) };\n    case 'Transfer':\n    case 'BillPay':\n      return { x: centerX + radius * 0.4 * Math.cos(angle), y: centerY + radius * 0.3 * Math.sin(angle) };\n    default:\n      return { x: centerX + radius * Math.random(), y: centerY + radius * Math.random() };\n  }\n};\n\nconst GraphVisualization = ({ graphData, onNodeDoubleClick, onLinkClick }) => {\n    const initialNodes = useMemo(() => graphData.nodes.map(node => ({\n      ...node,\n      position: getInitialNodePosition(node.type),\n      data: {\n        ...node.data,\n        displayName: node.data.label,\n        onLinkClick: node.data.link ? () => onLinkClick(node.data.link) : undefined\n      }\n    })), [graphData.nodes, onLinkClick]);\n  \n    const initialEdges = useMemo(() => graphData.edges.map(edge => {\n      const sourceNode = graphData.nodes.find(node => node.id === edge.source);\n      const targetNode = graphData.nodes.find(node => node.id === edge.target);\n      let label = '';\n  \n      if ((sourceNode.type === 'Customer' || targetNode.type === 'Customer') &&\n          (sourceNode.type === 'Transfer' || sourceNode.type === 'BillPay' ||\n           targetNode.type === 'Transfer' || targetNode.type === 'BillPay')) {\n        const transactionNode = sourceNode.type === 'Transfer' || sourceNode.type === 'BillPay' ? sourceNode : targetNode;\n        const customerNode = sourceNode.type === 'Customer' ? sourceNode : targetNode;\n        if (transactionNode.data && transactionNode.data.info) {\n          const transactionType = transactionNode.data.info.type;\n          if (transactionType === 'send' || transactionType === 'receive') {\n            label = `Customer ${transactionType === 'send' ? 'sends' : 'receives'}`;\n          } else if (transactionType === 'billPay') {\n            label = `Customer billPay`;\n          }\n        }\n      }\n  \n      return {\n        ...edge,\n        type: 'straight',\n        animated: false,\n        label,\n        labelStyle: { fill: '#888', fontWeight: 700 },\n        labelBgPadding: [8, 4],\n        labelBgBorderRadius: 4,\n        labelBgStyle: { fill: '#ffffff', color: '#888', fillOpacity: 0.7 },\n        style: { stroke: '#888', strokeWidth: 2 },\n      };\n    }), [graphData.edges, graphData.nodes]);\n  \n    const [nodes, setNodes] = useNodesState(initialNodes);\n    const [edges, setEdges] = useEdgesState(initialEdges);\n  \n    const onNodesChange = useCallback(\n      (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n      [setNodes]\n    );\n    const onEdgesChange = useCallback(\n      (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n      [setEdges]\n    );\n  \n    return (\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onNodeDoubleClick={onNodeDoubleClick}\n        nodeTypes={nodeTypes}\n      />\n    );\n  };\n  \n  export default GraphVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}